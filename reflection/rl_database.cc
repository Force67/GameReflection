// Copyright (C) Force67 <github.com/Force67>.
// For licensing information see LICENSE at the root of this distribution.
#include "rl_database.h"

#include <cstdio>
#include <simdjson.h>

namespace refl {

namespace {
cl::opt<std::string> JsonExportFile("json-export",
                                    cl::desc("Export symbol table as json"),
                                    cl::value_desc("filename"),
                                    cl::init("symbols.json"));
cl::opt<std::string> HeaderExportFile("header-export",
                                      cl::desc("Export symbol table as c++ header"),
                                      cl::value_desc("filename"),
                                      cl::init("symbols.h"));
}  // namespace

void RlDatabase::UpdateJsonReport() {
  using namespace simdjson;
  // ingest values.
  simdjson_result<padded_string> result = padded_string::load(JsonExportFile);
  if (result.error() != IO_ERROR) {
    auto& json = result.value();

  }

#if 0
  ondemand::parser parser;
  padded_string json = padded_string::load(JsonExportFile);
  ondemand::document tweets = parser.iterate(json);

  std::cout << uint64_t(tweets["search_metadata"]["count"]) << " results." << std::endl;
  #endif

#if 0
    // simdjson ingest, append...
  if (FILE* fptr = MakeFile(JsonExportFile)) {
    fprintf(fptr, "{\"hooks\":[\n");
    for (Node& sym : storage_) {
      fprintf(fptr, "{\"name\":\"%s\", \"address\":0},\n", sym.name.c_str());
    }
    fprintf(fptr, "]}");
    fclose(fptr);
  }
#endif
}

void RlDatabase::WriteCxxHeader() {
  constexpr char kHeaderText[] =
      R"(Auto-generated by gamerefl (C) Force67 2021.
      #pragma once
   )";

  fmt::print(kHeaderText);
  for (Node& n : storage_) {
    if (!n.signature.empty())
      fmt::print("extern {}{};\n", n.name, n.signature);
    else
      fmt::print("extern {};\n", n.name);
  }

  for (Node& n : storage_) {
    if (!n.signature.empty())
      fmt::print("extern {}{};\n", n.name, n.signature);
    else
      fmt::print("extern {};\n", n.name);
  }


#if 0
  if (FILE* fptr = MakeFile(HeaderExportFile)) {
    fprintf(fptr, "#pragma once\n\n//Autogenerated by gamerefr (c) Force67\n\n");
    // set up extern bindings
    for (Node& sym : storage_) {
      if (!sym.signature.empty()) {
        fprintf(fptr, "extern %s%s;\n", sym.name.c_str(), sym.signature.c_str());
      } else {
        fprintf(fptr, "extern %s;\n", sym.name.c_str());
      }
    }
    // set up overrides
    for (Node& sym : storage_) {
    }

    fclose(fptr);
  }
#endif
}
}  // namespace refl