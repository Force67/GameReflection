// Copyright (C) Force67 <github.com/Force67>.
// For licensing information see LICENSE at the root of this distribution.
#include "rl_database.h"
#include <cstdio>

#include <llvm/Support/FileSystem.h>

namespace refl {

namespace {
cl::opt<std::string> JsonExportFile("json-export",
                                   cl::desc("Export symbol table as json"),
                                   cl::value_desc("filename"),
                                   cl::init("symbols.json"));
cl::opt<std::string> HeaderExportFile("header-export",
                                   cl::desc("Export symbol table as c++ header"),
                                   cl::value_desc("filename"),
                                   cl::init("symbols.h"));
}  // namespace

void RlDatabase::UpdateJsonReport() {
    #if 0
    // simdjson ingest, append...
  if (FILE* fptr = MakeFile(JsonExportFile)) {
    fprintf(fptr, "{\"hooks\":[\n");
    for (Node& sym : storage_) {
      fprintf(fptr, "{\"name\":\"%s\", \"address\":0},\n", sym.name.c_str());
    }
    fprintf(fptr, "]}");
    fclose(fptr);
  }
  #endif
}

void RlDatabase::WriteCxxHeader() {
    #if 0
  constexpr char kHeaderText[] = 
   R"(Auto-generated by gamerefl (C) Force67 2021.
      #pragma once
   )";

  using namespace llvm::sys::fs;
  // open OS file.
  Expected<file_t> file = openNativeFileForWrite(
      HeaderExportFile, CreationDisposition::CD_CreateAlways, OpenFlags::OF_None);

  if (file) {
    closeFile(*file);
  }

  file.get()

  if (FILE* fptr = MakeFile(HeaderExportFile)) {
    fprintf(fptr, "#pragma once\n\n//Autogenerated by gamerefr (c) Force67\n\n");
    // set up extern bindings
    for (Node& sym : storage_) {
      if (!sym.signature.empty()) {
        fprintf(fptr, "extern %s%s;\n", sym.name.c_str(), sym.signature.c_str());
      } else {
        fprintf(fptr, "extern %s;\n", sym.name.c_str());
      }
    }
    // set up overrides
    for (Node& sym : storage_) {
    }

    fclose(fptr);
  }
  #endif
}
}  // namespace refl